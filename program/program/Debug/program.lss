
program.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000580  000005f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000580  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000600  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000630  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000140  00000000  00000000  00000670  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000018a6  00000000  00000000  000007b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a59  00000000  00000000  00002056  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b4d  00000000  00000000  00002aaf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002b4  00000000  00000000  000035fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000061c  00000000  00000000  000038b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000e55  00000000  00000000  00003ecc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000100  00000000  00000000  00004d21  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e8       	ldi	r30, 0x80	; 128
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 7e 02 	call	0x4fc	; 0x4fc <main>
  8e:	0c 94 be 02 	jmp	0x57c	; 0x57c <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <RTC_Init>:
	I2C_Write(0x03);  // Point to the day register
	I2C_Repeated_Start(DS1307_READ_ADDRESS);
	uint8_t day = I2C_Read_Nack();  // Read day and send NACK
	I2C_Stop();
	return bcd_to_decimal(day);  // Convert from BCD to decimal
}
  96:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <I2C_Init>
  9a:	08 95       	ret

0000009c <bcd_to_decimal>:
  9c:	98 2f       	mov	r25, r24
  9e:	92 95       	swap	r25
  a0:	9f 70       	andi	r25, 0x0F	; 15
  a2:	99 0f       	add	r25, r25
  a4:	29 2f       	mov	r18, r25
  a6:	22 0f       	add	r18, r18
  a8:	22 0f       	add	r18, r18
  aa:	92 0f       	add	r25, r18
  ac:	8f 70       	andi	r24, 0x0F	; 15
  ae:	89 0f       	add	r24, r25
  b0:	08 95       	ret

000000b2 <RTC_Get_Second>:
  b2:	cf 93       	push	r28
  b4:	80 ed       	ldi	r24, 0xD0	; 208
  b6:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <I2C_Start>
  ba:	80 e0       	ldi	r24, 0x00	; 0
  bc:	0e 94 f5 00 	call	0x1ea	; 0x1ea <I2C_Write>
  c0:	81 ed       	ldi	r24, 0xD1	; 209
  c2:	0e 94 09 01 	call	0x212	; 0x212 <I2C_Repeated_Start>
  c6:	0e 94 ff 00 	call	0x1fe	; 0x1fe <I2C_Read_Nack>
  ca:	c8 2f       	mov	r28, r24
  cc:	0e 94 ed 00 	call	0x1da	; 0x1da <I2C_Stop>
  d0:	8c 2f       	mov	r24, r28
  d2:	8f 77       	andi	r24, 0x7F	; 127
  d4:	0e 94 4e 00 	call	0x9c	; 0x9c <bcd_to_decimal>
  d8:	cf 91       	pop	r28
  da:	08 95       	ret

000000dc <RTC_Get_Minute>:
  dc:	cf 93       	push	r28
  de:	80 ed       	ldi	r24, 0xD0	; 208
  e0:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <I2C_Start>
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	0e 94 f5 00 	call	0x1ea	; 0x1ea <I2C_Write>
  ea:	81 ed       	ldi	r24, 0xD1	; 209
  ec:	0e 94 09 01 	call	0x212	; 0x212 <I2C_Repeated_Start>
  f0:	0e 94 ff 00 	call	0x1fe	; 0x1fe <I2C_Read_Nack>
  f4:	c8 2f       	mov	r28, r24
  f6:	0e 94 ed 00 	call	0x1da	; 0x1da <I2C_Stop>
  fa:	8c 2f       	mov	r24, r28
  fc:	0e 94 4e 00 	call	0x9c	; 0x9c <bcd_to_decimal>
 100:	cf 91       	pop	r28
 102:	08 95       	ret

00000104 <RTC_Get_Hour>:
 104:	cf 93       	push	r28
 106:	80 ed       	ldi	r24, 0xD0	; 208
 108:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <I2C_Start>
 10c:	82 e0       	ldi	r24, 0x02	; 2
 10e:	0e 94 f5 00 	call	0x1ea	; 0x1ea <I2C_Write>
 112:	81 ed       	ldi	r24, 0xD1	; 209
 114:	0e 94 09 01 	call	0x212	; 0x212 <I2C_Repeated_Start>
 118:	0e 94 ff 00 	call	0x1fe	; 0x1fe <I2C_Read_Nack>
 11c:	c8 2f       	mov	r28, r24
 11e:	0e 94 ed 00 	call	0x1da	; 0x1da <I2C_Stop>
 122:	8c 2f       	mov	r24, r28
 124:	8f 73       	andi	r24, 0x3F	; 63
 126:	0e 94 4e 00 	call	0x9c	; 0x9c <bcd_to_decimal>
 12a:	cf 91       	pop	r28
 12c:	08 95       	ret

0000012e <RTC_Get_Date>:

uint8_t RTC_Get_Date(void) {
 12e:	cf 93       	push	r28
	I2C_Start(DS1307_WRITE_ADDRESS);
 130:	80 ed       	ldi	r24, 0xD0	; 208
 132:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <I2C_Start>
	I2C_Write(0x04);  // Point to the date register
 136:	84 e0       	ldi	r24, 0x04	; 4
 138:	0e 94 f5 00 	call	0x1ea	; 0x1ea <I2C_Write>
	I2C_Repeated_Start(DS1307_READ_ADDRESS);
 13c:	81 ed       	ldi	r24, 0xD1	; 209
 13e:	0e 94 09 01 	call	0x212	; 0x212 <I2C_Repeated_Start>
	uint8_t date = I2C_Read_Nack();  // Read date and send NACK
 142:	0e 94 ff 00 	call	0x1fe	; 0x1fe <I2C_Read_Nack>
 146:	c8 2f       	mov	r28, r24
	I2C_Stop();
 148:	0e 94 ed 00 	call	0x1da	; 0x1da <I2C_Stop>
	return bcd_to_decimal(date);  // Convert from BCD to decimal
 14c:	8c 2f       	mov	r24, r28
 14e:	0e 94 4e 00 	call	0x9c	; 0x9c <bcd_to_decimal>
}
 152:	cf 91       	pop	r28
 154:	08 95       	ret

00000156 <RTC_Get_Month>:

uint8_t RTC_Get_Month(void) {
 156:	cf 93       	push	r28
	I2C_Start(DS1307_WRITE_ADDRESS);
 158:	80 ed       	ldi	r24, 0xD0	; 208
 15a:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <I2C_Start>
	I2C_Write(0x05);  // Point to the month register
 15e:	85 e0       	ldi	r24, 0x05	; 5
 160:	0e 94 f5 00 	call	0x1ea	; 0x1ea <I2C_Write>
	I2C_Repeated_Start(DS1307_READ_ADDRESS);
 164:	81 ed       	ldi	r24, 0xD1	; 209
 166:	0e 94 09 01 	call	0x212	; 0x212 <I2C_Repeated_Start>
	uint8_t month = I2C_Read_Nack();  // Read month and send NACK
 16a:	0e 94 ff 00 	call	0x1fe	; 0x1fe <I2C_Read_Nack>
 16e:	c8 2f       	mov	r28, r24
	I2C_Stop();
 170:	0e 94 ed 00 	call	0x1da	; 0x1da <I2C_Stop>
	return bcd_to_decimal(month);  // Convert from BCD to decimal
 174:	8c 2f       	mov	r24, r28
 176:	0e 94 4e 00 	call	0x9c	; 0x9c <bcd_to_decimal>
}
 17a:	cf 91       	pop	r28
 17c:	08 95       	ret

0000017e <RTC_Get_Year>:

uint8_t RTC_Get_Year(void) {
 17e:	cf 93       	push	r28
	I2C_Start(DS1307_WRITE_ADDRESS);
 180:	80 ed       	ldi	r24, 0xD0	; 208
 182:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <I2C_Start>
	I2C_Write(0x06);  // Point to the year register
 186:	86 e0       	ldi	r24, 0x06	; 6
 188:	0e 94 f5 00 	call	0x1ea	; 0x1ea <I2C_Write>
	I2C_Repeated_Start(DS1307_READ_ADDRESS);
 18c:	81 ed       	ldi	r24, 0xD1	; 209
 18e:	0e 94 09 01 	call	0x212	; 0x212 <I2C_Repeated_Start>
	uint8_t year = I2C_Read_Nack();  // Read year and send NACK
 192:	0e 94 ff 00 	call	0x1fe	; 0x1fe <I2C_Read_Nack>
 196:	c8 2f       	mov	r28, r24
	I2C_Stop();
 198:	0e 94 ed 00 	call	0x1da	; 0x1da <I2C_Stop>
	return bcd_to_decimal(year);  // Convert from BCD to decimal
 19c:	8c 2f       	mov	r24, r28
 19e:	0e 94 4e 00 	call	0x9c	; 0x9c <bcd_to_decimal>
}
 1a2:	cf 91       	pop	r28
 1a4:	08 95       	ret

000001a6 <I2C_Init>:
// Function to read a byte of data from the I2C bus and send an ACK to continue reading
uint8_t I2C_Read_Ack() {
	TWCR = (1 << TWEN) | (1 << TWINT) | (1 << TWEA); // Enable ACK for the next byte
	while (!(TWCR & (1 << TWINT))); // Wait for the data to be received
	return TWDR; // Return the received data
}
 1a6:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 1aa:	88 e4       	ldi	r24, 0x48	; 72
 1ac:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 1b0:	84 e0       	ldi	r24, 0x04	; 4
 1b2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1b6:	08 95       	ret

000001b8 <I2C_Start>:
 1b8:	94 ea       	ldi	r25, 0xA4	; 164
 1ba:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1be:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1c2:	99 23       	and	r25, r25
 1c4:	e4 f7       	brge	.-8      	; 0x1be <I2C_Start+0x6>
 1c6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 1ca:	84 e8       	ldi	r24, 0x84	; 132
 1cc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1d0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1d4:	88 23       	and	r24, r24
 1d6:	e4 f7       	brge	.-8      	; 0x1d0 <I2C_Start+0x18>
 1d8:	08 95       	ret

000001da <I2C_Stop>:
 1da:	84 e9       	ldi	r24, 0x94	; 148
 1dc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1e0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1e4:	84 fd       	sbrc	r24, 4
 1e6:	fc cf       	rjmp	.-8      	; 0x1e0 <I2C_Stop+0x6>
 1e8:	08 95       	ret

000001ea <I2C_Write>:
 1ea:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 1ee:	84 e8       	ldi	r24, 0x84	; 132
 1f0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1f4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1f8:	88 23       	and	r24, r24
 1fa:	e4 f7       	brge	.-8      	; 0x1f4 <I2C_Write+0xa>
 1fc:	08 95       	ret

000001fe <I2C_Read_Nack>:

// Function to read a byte of data from the I2C bus and send a NACK to end the reading
uint8_t I2C_Read_Nack() {
	TWCR = (1 << TWEN) | (1 << TWINT); // No ACK, just read the byte
 1fe:	84 e8       	ldi	r24, 0x84	; 132
 200:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT))); // Wait for the data to be received
 204:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 208:	88 23       	and	r24, r24
 20a:	e4 f7       	brge	.-8      	; 0x204 <I2C_Read_Nack+0x6>
	return TWDR; // Return the received data
 20c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
 210:	08 95       	ret

00000212 <I2C_Repeated_Start>:

// Function to send a repeated start condition and address to re-initiate communication
void I2C_Repeated_Start(uint8_t address) {
	TWCR = (1 << TWSTA) | (1 << TWEN) | (1 << TWINT); // Send start condition
 212:	94 ea       	ldi	r25, 0xA4	; 164
 214:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT))); // Wait for the start condition to be transmitted
 218:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 21c:	99 23       	and	r25, r25
 21e:	e4 f7       	brge	.-8      	; 0x218 <I2C_Repeated_Start+0x6>
	TWDR = address; // Load the address into the data register
 220:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1 << TWEN) | (1 << TWINT); // Send the address to the slave
 224:	84 e8       	ldi	r24, 0x84	; 132
 226:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT))); // Wait for the transmission to complete
 22a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 22e:	88 23       	and	r24, r24
 230:	e4 f7       	brge	.-8      	; 0x22a <I2C_Repeated_Start+0x18>
}
 232:	08 95       	ret

00000234 <Led7Segment_Init>:
void display_test(){
	for (int i = 0; i < 8; i++) {
		display_digit(i, 5);  // Display the number 5 on each digit
		_delay_ms(500);  // Delay for half a second
	}
}
 234:	84 b1       	in	r24, 0x04	; 4
 236:	8c 63       	ori	r24, 0x3C	; 60
 238:	84 b9       	out	0x04, r24	; 4
 23a:	87 b1       	in	r24, 0x07	; 7
 23c:	8f 60       	ori	r24, 0x0F	; 15
 23e:	87 b9       	out	0x07, r24	; 7
 240:	8f ef       	ldi	r24, 0xFF	; 255
 242:	8a b9       	out	0x0a, r24	; 10
 244:	08 95       	ret

00000246 <display_digit>:
 246:	95 b1       	in	r25, 0x05	; 5
 248:	93 7c       	andi	r25, 0xC3	; 195
 24a:	95 b9       	out	0x05, r25	; 5
 24c:	98 b1       	in	r25, 0x08	; 8
 24e:	90 7f       	andi	r25, 0xF0	; 240
 250:	98 b9       	out	0x08, r25	; 8
 252:	84 30       	cpi	r24, 0x04	; 4
 254:	78 f4       	brcc	.+30     	; 0x274 <display_digit+0x2e>
 256:	95 b1       	in	r25, 0x05	; 5
 258:	48 2f       	mov	r20, r24
 25a:	50 e0       	ldi	r21, 0x00	; 0
 25c:	4e 5f       	subi	r20, 0xFE	; 254
 25e:	5f 4f       	sbci	r21, 0xFF	; 255
 260:	21 e0       	ldi	r18, 0x01	; 1
 262:	30 e0       	ldi	r19, 0x00	; 0
 264:	02 c0       	rjmp	.+4      	; 0x26a <display_digit+0x24>
 266:	22 0f       	add	r18, r18
 268:	33 1f       	adc	r19, r19
 26a:	4a 95       	dec	r20
 26c:	e2 f7       	brpl	.-8      	; 0x266 <display_digit+0x20>
 26e:	29 2b       	or	r18, r25
 270:	25 b9       	out	0x05, r18	; 5
 272:	0e c0       	rjmp	.+28     	; 0x290 <display_digit+0x4a>
 274:	98 b1       	in	r25, 0x08	; 8
 276:	48 2f       	mov	r20, r24
 278:	50 e0       	ldi	r21, 0x00	; 0
 27a:	44 50       	subi	r20, 0x04	; 4
 27c:	51 09       	sbc	r21, r1
 27e:	21 e0       	ldi	r18, 0x01	; 1
 280:	30 e0       	ldi	r19, 0x00	; 0
 282:	02 c0       	rjmp	.+4      	; 0x288 <display_digit+0x42>
 284:	22 0f       	add	r18, r18
 286:	33 1f       	adc	r19, r19
 288:	4a 95       	dec	r20
 28a:	e2 f7       	brpl	.-8      	; 0x284 <display_digit+0x3e>
 28c:	29 2b       	or	r18, r25
 28e:	28 b9       	out	0x08, r18	; 8
 290:	e6 2f       	mov	r30, r22
 292:	f0 e0       	ldi	r31, 0x00	; 0
 294:	e0 50       	subi	r30, 0x00	; 0
 296:	ff 4f       	sbci	r31, 0xFF	; 255
 298:	90 81       	ld	r25, Z
 29a:	9b b9       	out	0x0b, r25	; 11
 29c:	21 e0       	ldi	r18, 0x01	; 1
 29e:	81 30       	cpi	r24, 0x01	; 1
 2a0:	09 f0       	breq	.+2      	; 0x2a4 <display_digit+0x5e>
 2a2:	20 e0       	ldi	r18, 0x00	; 0
 2a4:	91 e0       	ldi	r25, 0x01	; 1
 2a6:	83 30       	cpi	r24, 0x03	; 3
 2a8:	09 f0       	breq	.+2      	; 0x2ac <display_digit+0x66>
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	29 2b       	or	r18, r25
 2ae:	91 e0       	ldi	r25, 0x01	; 1
 2b0:	85 30       	cpi	r24, 0x05	; 5
 2b2:	09 f0       	breq	.+2      	; 0x2b6 <display_digit+0x70>
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	31 e0       	ldi	r19, 0x01	; 1
 2b8:	87 30       	cpi	r24, 0x07	; 7
 2ba:	09 f0       	breq	.+2      	; 0x2be <display_digit+0x78>
 2bc:	30 e0       	ldi	r19, 0x00	; 0
 2be:	92 2b       	or	r25, r18
 2c0:	11 f4       	brne	.+4      	; 0x2c6 <display_digit+0x80>
 2c2:	33 23       	and	r19, r19
 2c4:	21 f0       	breq	.+8      	; 0x2ce <display_digit+0x88>
 2c6:	8b b1       	in	r24, 0x0b	; 11
 2c8:	80 68       	ori	r24, 0x80	; 128
 2ca:	8b b9       	out	0x0b, r24	; 11
 2cc:	08 95       	ret
 2ce:	8b b1       	in	r24, 0x0b	; 11
 2d0:	8f 77       	andi	r24, 0x7F	; 127
 2d2:	8b b9       	out	0x0b, r24	; 11
 2d4:	08 95       	ret

000002d6 <display_time>:

// Function to display time in HH:MM:SS format on the 7-segment display
void display_time(uint8_t hour, uint8_t minute, uint8_t second) {
 2d6:	ff 92       	push	r15
 2d8:	0f 93       	push	r16
 2da:	1f 93       	push	r17
 2dc:	cf 93       	push	r28
 2de:	df 93       	push	r29
 2e0:	26 2f       	mov	r18, r22
	// Split hours, minutes, and seconds into tens and ones digits
	uint8_t hour_tens = hour / 10;      // Tens place of hour
 2e2:	cd ec       	ldi	r28, 0xCD	; 205
 2e4:	8c 9f       	mul	r24, r28
 2e6:	91 2d       	mov	r25, r1
 2e8:	11 24       	eor	r1, r1
 2ea:	69 2f       	mov	r22, r25
 2ec:	66 95       	lsr	r22
 2ee:	66 95       	lsr	r22
 2f0:	66 95       	lsr	r22
	uint8_t hour_ones = hour % 10;      // Ones place of hour
 2f2:	36 2f       	mov	r19, r22
 2f4:	33 0f       	add	r19, r19
 2f6:	93 2f       	mov	r25, r19
 2f8:	99 0f       	add	r25, r25
 2fa:	99 0f       	add	r25, r25
 2fc:	93 0f       	add	r25, r19
 2fe:	f8 2e       	mov	r15, r24
 300:	f9 1a       	sub	r15, r25
	uint8_t minute_tens = minute / 10;  // Tens place of minute
 302:	2c 9f       	mul	r18, r28
 304:	d1 2d       	mov	r29, r1
 306:	11 24       	eor	r1, r1
 308:	d6 95       	lsr	r29
 30a:	d6 95       	lsr	r29
 30c:	d6 95       	lsr	r29
	uint8_t minute_ones = minute % 10;  // Ones place of minute
 30e:	9d 2f       	mov	r25, r29
 310:	99 0f       	add	r25, r25
 312:	89 2f       	mov	r24, r25
 314:	88 0f       	add	r24, r24
 316:	88 0f       	add	r24, r24
 318:	89 0f       	add	r24, r25
 31a:	02 2f       	mov	r16, r18
 31c:	08 1b       	sub	r16, r24
	uint8_t second_tens = second / 10;  // Tens place of second
 31e:	4c 9f       	mul	r20, r28
 320:	c1 2d       	mov	r28, r1
 322:	11 24       	eor	r1, r1
 324:	c6 95       	lsr	r28
 326:	c6 95       	lsr	r28
 328:	c6 95       	lsr	r28
	uint8_t second_ones = second % 10;  // Ones place of second
 32a:	9c 2f       	mov	r25, r28
 32c:	99 0f       	add	r25, r25
 32e:	89 2f       	mov	r24, r25
 330:	88 0f       	add	r24, r24
 332:	88 0f       	add	r24, r24
 334:	89 0f       	add	r24, r25
 336:	14 2f       	mov	r17, r20
 338:	18 1b       	sub	r17, r24

	// Display the time on the 7-segment display (LED1 to LED6)
	display_digit(0, hour_tens);   // LED1: Tens place of hour
 33a:	80 e0       	ldi	r24, 0x00	; 0
 33c:	0e 94 23 01 	call	0x246	; 0x246 <display_digit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 340:	8f e0       	ldi	r24, 0x0F	; 15
 342:	97 e2       	ldi	r25, 0x27	; 39
 344:	01 97       	sbiw	r24, 0x01	; 1
 346:	f1 f7       	brne	.-4      	; 0x344 <display_time+0x6e>
 348:	00 c0       	rjmp	.+0      	; 0x34a <display_time+0x74>
 34a:	00 00       	nop
	_delay_ms(40);
	display_digit(1, hour_ones);   // LED2: Ones place of hour
 34c:	6f 2d       	mov	r22, r15
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	0e 94 23 01 	call	0x246	; 0x246 <display_digit>
 354:	8f e0       	ldi	r24, 0x0F	; 15
 356:	97 e2       	ldi	r25, 0x27	; 39
 358:	01 97       	sbiw	r24, 0x01	; 1
 35a:	f1 f7       	brne	.-4      	; 0x358 <display_time+0x82>
 35c:	00 c0       	rjmp	.+0      	; 0x35e <display_time+0x88>
 35e:	00 00       	nop
	_delay_ms(40);
	display_digit(2, minute_tens); // LED3: Tens place of minute
 360:	6d 2f       	mov	r22, r29
 362:	82 e0       	ldi	r24, 0x02	; 2
 364:	0e 94 23 01 	call	0x246	; 0x246 <display_digit>
 368:	8f e0       	ldi	r24, 0x0F	; 15
 36a:	97 e2       	ldi	r25, 0x27	; 39
 36c:	01 97       	sbiw	r24, 0x01	; 1
 36e:	f1 f7       	brne	.-4      	; 0x36c <display_time+0x96>
 370:	00 c0       	rjmp	.+0      	; 0x372 <display_time+0x9c>
 372:	00 00       	nop
	_delay_ms(40);
	display_digit(3, minute_ones); // LED4: Ones place of minute
 374:	60 2f       	mov	r22, r16
 376:	83 e0       	ldi	r24, 0x03	; 3
 378:	0e 94 23 01 	call	0x246	; 0x246 <display_digit>
 37c:	8f e0       	ldi	r24, 0x0F	; 15
 37e:	97 e2       	ldi	r25, 0x27	; 39
 380:	01 97       	sbiw	r24, 0x01	; 1
 382:	f1 f7       	brne	.-4      	; 0x380 <display_time+0xaa>
 384:	00 c0       	rjmp	.+0      	; 0x386 <display_time+0xb0>
 386:	00 00       	nop
	_delay_ms(40);
	display_digit(4, second_tens); // LED5: Tens place of second
 388:	6c 2f       	mov	r22, r28
 38a:	84 e0       	ldi	r24, 0x04	; 4
 38c:	0e 94 23 01 	call	0x246	; 0x246 <display_digit>
 390:	8f e0       	ldi	r24, 0x0F	; 15
 392:	97 e2       	ldi	r25, 0x27	; 39
 394:	01 97       	sbiw	r24, 0x01	; 1
 396:	f1 f7       	brne	.-4      	; 0x394 <display_time+0xbe>
 398:	00 c0       	rjmp	.+0      	; 0x39a <display_time+0xc4>
 39a:	00 00       	nop
	_delay_ms(40);
	display_digit(5, second_ones); // LED6: Ones place of second
 39c:	61 2f       	mov	r22, r17
 39e:	85 e0       	ldi	r24, 0x05	; 5
 3a0:	0e 94 23 01 	call	0x246	; 0x246 <display_digit>
 3a4:	8f e0       	ldi	r24, 0x0F	; 15
 3a6:	97 e2       	ldi	r25, 0x27	; 39
 3a8:	01 97       	sbiw	r24, 0x01	; 1
 3aa:	f1 f7       	brne	.-4      	; 0x3a8 <display_time+0xd2>
 3ac:	00 c0       	rjmp	.+0      	; 0x3ae <display_time+0xd8>
 3ae:	00 00       	nop
	_delay_ms(40);
}
 3b0:	df 91       	pop	r29
 3b2:	cf 91       	pop	r28
 3b4:	1f 91       	pop	r17
 3b6:	0f 91       	pop	r16
 3b8:	ff 90       	pop	r15
 3ba:	08 95       	ret

000003bc <display_date>:

// Function to display the date in DD/MM/YYYY format on the 7-segment display
void display_date(uint8_t date, uint8_t month, uint8_t year) {
 3bc:	ff 92       	push	r15
 3be:	0f 93       	push	r16
 3c0:	1f 93       	push	r17
 3c2:	cf 93       	push	r28
 3c4:	df 93       	push	r29
 3c6:	26 2f       	mov	r18, r22
	// Split the date, month, and year into tens and ones digits
	uint8_t date_tens = date / 10;      // Tens place of date
 3c8:	cd ec       	ldi	r28, 0xCD	; 205
 3ca:	8c 9f       	mul	r24, r28
 3cc:	91 2d       	mov	r25, r1
 3ce:	11 24       	eor	r1, r1
 3d0:	69 2f       	mov	r22, r25
 3d2:	66 95       	lsr	r22
 3d4:	66 95       	lsr	r22
 3d6:	66 95       	lsr	r22
	uint8_t date_ones = date % 10;      // Ones place of date
 3d8:	36 2f       	mov	r19, r22
 3da:	33 0f       	add	r19, r19
 3dc:	93 2f       	mov	r25, r19
 3de:	99 0f       	add	r25, r25
 3e0:	99 0f       	add	r25, r25
 3e2:	93 0f       	add	r25, r19
 3e4:	f8 2e       	mov	r15, r24
 3e6:	f9 1a       	sub	r15, r25
	uint8_t month_tens = month / 10;    // Tens place of month
 3e8:	2c 9f       	mul	r18, r28
 3ea:	d1 2d       	mov	r29, r1
 3ec:	11 24       	eor	r1, r1
 3ee:	d6 95       	lsr	r29
 3f0:	d6 95       	lsr	r29
 3f2:	d6 95       	lsr	r29
	uint8_t month_ones = month % 10;    // Ones place of month
 3f4:	9d 2f       	mov	r25, r29
 3f6:	99 0f       	add	r25, r25
 3f8:	89 2f       	mov	r24, r25
 3fa:	88 0f       	add	r24, r24
 3fc:	88 0f       	add	r24, r24
 3fe:	89 0f       	add	r24, r25
 400:	02 2f       	mov	r16, r18
 402:	08 1b       	sub	r16, r24
	uint8_t year_tens = year / 10;      // Tens place of year
 404:	4c 9f       	mul	r20, r28
 406:	c1 2d       	mov	r28, r1
 408:	11 24       	eor	r1, r1
 40a:	c6 95       	lsr	r28
 40c:	c6 95       	lsr	r28
 40e:	c6 95       	lsr	r28
	uint8_t year_ones = year % 10;      // Ones place of year
 410:	9c 2f       	mov	r25, r28
 412:	99 0f       	add	r25, r25
 414:	89 2f       	mov	r24, r25
 416:	88 0f       	add	r24, r24
 418:	88 0f       	add	r24, r24
 41a:	89 0f       	add	r24, r25
 41c:	14 2f       	mov	r17, r20
 41e:	18 1b       	sub	r17, r24

	// Display the date, month, and year on the 7-segment display (LED1 to LED6)
	display_digit(0, date_tens);        // LED1: Tens place of date
 420:	80 e0       	ldi	r24, 0x00	; 0
 422:	0e 94 23 01 	call	0x246	; 0x246 <display_digit>
 426:	8f e0       	ldi	r24, 0x0F	; 15
 428:	97 e2       	ldi	r25, 0x27	; 39
 42a:	01 97       	sbiw	r24, 0x01	; 1
 42c:	f1 f7       	brne	.-4      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 42e:	00 c0       	rjmp	.+0      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 430:	00 00       	nop
	_delay_ms(40);
	display_digit(1, date_ones);        // LED2: Ones place of date
 432:	6f 2d       	mov	r22, r15
 434:	81 e0       	ldi	r24, 0x01	; 1
 436:	0e 94 23 01 	call	0x246	; 0x246 <display_digit>
 43a:	8f e0       	ldi	r24, 0x0F	; 15
 43c:	97 e2       	ldi	r25, 0x27	; 39
 43e:	01 97       	sbiw	r24, 0x01	; 1
 440:	f1 f7       	brne	.-4      	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 442:	00 c0       	rjmp	.+0      	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 444:	00 00       	nop
	_delay_ms(40);
	display_digit(2, month_tens);       // LED3: Tens place of month
 446:	6d 2f       	mov	r22, r29
 448:	82 e0       	ldi	r24, 0x02	; 2
 44a:	0e 94 23 01 	call	0x246	; 0x246 <display_digit>
 44e:	8f e0       	ldi	r24, 0x0F	; 15
 450:	97 e2       	ldi	r25, 0x27	; 39
 452:	01 97       	sbiw	r24, 0x01	; 1
 454:	f1 f7       	brne	.-4      	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 456:	00 c0       	rjmp	.+0      	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
 458:	00 00       	nop
	_delay_ms(40);
	display_digit(3, month_ones);       // LED4: Ones place of month
 45a:	60 2f       	mov	r22, r16
 45c:	83 e0       	ldi	r24, 0x03	; 3
 45e:	0e 94 23 01 	call	0x246	; 0x246 <display_digit>
 462:	8f e0       	ldi	r24, 0x0F	; 15
 464:	97 e2       	ldi	r25, 0x27	; 39
 466:	01 97       	sbiw	r24, 0x01	; 1
 468:	f1 f7       	brne	.-4      	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 46a:	00 c0       	rjmp	.+0      	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
 46c:	00 00       	nop
	_delay_ms(40);
	display_digit(4, year_tens);        // LED5: Tens place of year
 46e:	6c 2f       	mov	r22, r28
 470:	84 e0       	ldi	r24, 0x04	; 4
 472:	0e 94 23 01 	call	0x246	; 0x246 <display_digit>
 476:	8f e0       	ldi	r24, 0x0F	; 15
 478:	97 e2       	ldi	r25, 0x27	; 39
 47a:	01 97       	sbiw	r24, 0x01	; 1
 47c:	f1 f7       	brne	.-4      	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
 47e:	00 c0       	rjmp	.+0      	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
 480:	00 00       	nop
	_delay_ms(40);
	display_digit(5, year_ones);        // LED6: Ones place of year
 482:	61 2f       	mov	r22, r17
 484:	85 e0       	ldi	r24, 0x05	; 5
 486:	0e 94 23 01 	call	0x246	; 0x246 <display_digit>
 48a:	8f e0       	ldi	r24, 0x0F	; 15
 48c:	97 e2       	ldi	r25, 0x27	; 39
 48e:	01 97       	sbiw	r24, 0x01	; 1
 490:	f1 f7       	brne	.-4      	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
 492:	00 c0       	rjmp	.+0      	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
 494:	00 00       	nop
	_delay_ms(40);
}
 496:	df 91       	pop	r29
 498:	cf 91       	pop	r28
 49a:	1f 91       	pop	r17
 49c:	0f 91       	pop	r16
 49e:	ff 90       	pop	r15
 4a0:	08 95       	ret

000004a2 <button_init>:
	}
}


void button_init() {
	DDRB &= (~(1 << PINB0)) & (~(1 << PINB1));  
 4a2:	84 b1       	in	r24, 0x04	; 4
 4a4:	8c 7f       	andi	r24, 0xFC	; 252
 4a6:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1 << PINB0) | (1 << PINB1);  
 4a8:	85 b1       	in	r24, 0x05	; 5
 4aa:	83 60       	ori	r24, 0x03	; 3
 4ac:	85 b9       	out	0x05, r24	; 5
 4ae:	08 95       	ret

000004b0 <check_button0>:
}

int check_button0() {
	static uint8_t prev_state = 1;  // Previous PB0 state
	uint8_t current_state = PINB & (1 << PINB0);  // Read current PB0 state
 4b0:	83 b1       	in	r24, 0x03	; 3

	if (!current_state && prev_state) {  // Detect button press (falling edge)
 4b2:	98 2f       	mov	r25, r24
 4b4:	91 70       	andi	r25, 0x01	; 1
 4b6:	80 fd       	sbrc	r24, 0
 4b8:	09 c0       	rjmp	.+18     	; 0x4cc <check_button0+0x1c>
 4ba:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <prev_state.1804>
 4be:	88 23       	and	r24, r24
 4c0:	29 f0       	breq	.+10     	; 0x4cc <check_button0+0x1c>
		prev_state = current_state;  // Update previous state
 4c2:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <prev_state.1804>
		return 1;  // Button press detected
 4c6:	81 e0       	ldi	r24, 0x01	; 1
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	08 95       	ret
	}

	prev_state = current_state;  // Update previous state
 4cc:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <prev_state.1804>
	return 0;  // No button press
 4d0:	80 e0       	ldi	r24, 0x00	; 0
 4d2:	90 e0       	ldi	r25, 0x00	; 0
}
 4d4:	08 95       	ret

000004d6 <check_button1>:

int check_button1() {
	static uint8_t prev_state = 1;  // Previous PB0 state
	uint8_t current_state = PINB & (1 << PINB1);  // Read current PB0 state
 4d6:	83 b1       	in	r24, 0x03	; 3

	if (!current_state && prev_state) {  // Detect button press (falling edge)
 4d8:	98 2f       	mov	r25, r24
 4da:	92 70       	andi	r25, 0x02	; 2
 4dc:	81 fd       	sbrc	r24, 1
 4de:	09 c0       	rjmp	.+18     	; 0x4f2 <check_button1+0x1c>
 4e0:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <prev_state.1808>
 4e4:	88 23       	and	r24, r24
 4e6:	29 f0       	breq	.+10     	; 0x4f2 <check_button1+0x1c>
		prev_state = current_state;  // Update previous state
 4e8:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <prev_state.1808>
		return 1;  // Button press detected
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	08 95       	ret
	}

	prev_state = current_state;  // Update previous state
 4f2:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <prev_state.1808>
	return 0;  // No button press
 4f6:	80 e0       	ldi	r24, 0x00	; 0
 4f8:	90 e0       	ldi	r25, 0x00	; 0
}
 4fa:	08 95       	ret

000004fc <main>:
void button_init();
int check_button();

int main(void) {
	
	Led7Segment_Init();  
 4fc:	0e 94 1a 01 	call	0x234	; 0x234 <Led7Segment_Init>
	RTC_Init();          
 500:	0e 94 4b 00 	call	0x96	; 0x96 <RTC_Init>
	button_init();       
 504:	0e 94 51 02 	call	0x4a2	; 0x4a2 <button_init>

	uint8_t display_mode = 0; // 0: Show time, 1: Show date
 508:	c0 e0       	ldi	r28, 0x00	; 0

	while (1) {
		
		if (check_button0()) {
 50a:	0e 94 58 02 	call	0x4b0	; 0x4b0 <check_button0>
 50e:	89 2b       	or	r24, r25
 510:	51 f0       	breq	.+20     	; 0x526 <main+0x2a>
 512:	2f ef       	ldi	r18, 0xFF	; 255
 514:	89 ef       	ldi	r24, 0xF9	; 249
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	21 50       	subi	r18, 0x01	; 1
 51a:	80 40       	sbci	r24, 0x00	; 0
 51c:	90 40       	sbci	r25, 0x00	; 0
 51e:	e1 f7       	brne	.-8      	; 0x518 <main+0x1c>
 520:	00 c0       	rjmp	.+0      	; 0x522 <main+0x26>
 522:	00 00       	nop
			_delay_ms(20);  
			display_mode = 0;  
 524:	c0 e0       	ldi	r28, 0x00	; 0
		}
		
		if (check_button1()){
 526:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <check_button1>
 52a:	89 2b       	or	r24, r25
 52c:	51 f0       	breq	.+20     	; 0x542 <main+0x46>
 52e:	2f ef       	ldi	r18, 0xFF	; 255
 530:	89 ef       	ldi	r24, 0xF9	; 249
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	21 50       	subi	r18, 0x01	; 1
 536:	80 40       	sbci	r24, 0x00	; 0
 538:	90 40       	sbci	r25, 0x00	; 0
 53a:	e1 f7       	brne	.-8      	; 0x534 <main+0x38>
 53c:	00 c0       	rjmp	.+0      	; 0x53e <main+0x42>
 53e:	00 00       	nop
			_delay_ms(20);
			display_mode = 1;
 540:	c1 e0       	ldi	r28, 0x01	; 1
		}

		if (display_mode == 0) {
 542:	c1 11       	cpse	r28, r1
 544:	0d c0       	rjmp	.+26     	; 0x560 <main+0x64>
			uint8_t second = RTC_Get_Second();
 546:	0e 94 59 00 	call	0xb2	; 0xb2 <RTC_Get_Second>
 54a:	18 2f       	mov	r17, r24
			uint8_t minute = RTC_Get_Minute();
 54c:	0e 94 6e 00 	call	0xdc	; 0xdc <RTC_Get_Minute>
 550:	d8 2f       	mov	r29, r24
			uint8_t hour = RTC_Get_Hour();
 552:	0e 94 82 00 	call	0x104	; 0x104 <RTC_Get_Hour>
			display_time(hour, minute, second);  // Display time
 556:	41 2f       	mov	r20, r17
 558:	6d 2f       	mov	r22, r29
 55a:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <display_time>
 55e:	d5 cf       	rjmp	.-86     	; 0x50a <main+0xe>
			} else {
			uint8_t date = RTC_Get_Date();
 560:	0e 94 97 00 	call	0x12e	; 0x12e <RTC_Get_Date>
 564:	d8 2f       	mov	r29, r24
			uint8_t month = RTC_Get_Month();
 566:	0e 94 ab 00 	call	0x156	; 0x156 <RTC_Get_Month>
 56a:	18 2f       	mov	r17, r24
			uint8_t year = RTC_Get_Year();
 56c:	0e 94 bf 00 	call	0x17e	; 0x17e <RTC_Get_Year>
			display_date(date, month, year);  // Display date
 570:	48 2f       	mov	r20, r24
 572:	61 2f       	mov	r22, r17
 574:	8d 2f       	mov	r24, r29
 576:	0e 94 de 01 	call	0x3bc	; 0x3bc <display_date>
 57a:	c7 cf       	rjmp	.-114    	; 0x50a <main+0xe>

0000057c <_exit>:
 57c:	f8 94       	cli

0000057e <__stop_program>:
 57e:	ff cf       	rjmp	.-2      	; 0x57e <__stop_program>
